# -*- coding: utf-8 -*-
"""burusho_translation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Sl_kkRbMC54iaAP-lYom4dhEiKErugr
"""

import numpy as np
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Embedding

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Replace with your actual file path
file_path = '/content/drive/MyDrive/conversation.xlsx'
df = pd.read_excel(file_path)

# Display the data
print(df.head())

import re
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Extract English and Brushaski columns
english_sentences = df['English'].astype(str).tolist()
brushaski_sentences = df['Brushaski'].astype(str).tolist()

# Function to clean sentences
def clean_text(sentences):
    cleaned_sentences = []
    for sentence in sentences:
        sentence = sentence.lower()  # Convert to lowercase
        sentence = re.sub(r'\n', ' ', sentence)  # Remove newline characters
        sentence = re.sub(r'[^\w\s]', '', sentence)  # Remove punctuation
        sentence = re.sub(r'\s+', ' ', sentence)  # Replace multiple spaces with a single space
        sentence = sentence.strip()  # Remove leading/trailing spaces
        cleaned_sentences.append(sentence)
    return cleaned_sentences

# Apply cleaning function
english_sentences = clean_text(english_sentences)
brushaski_sentences = clean_text(brushaski_sentences)

# Print a few cleaned sentences to verify
print("Sample cleaned English sentence:", english_sentences[:1])
print("Sample cleaned Brushaski sentence:", brushaski_sentences[:1])

# Tokenize English sentences
english_tokenizer = Tokenizer()
english_tokenizer.fit_on_texts(english_sentences)
english_sequences = english_tokenizer.texts_to_sequences(english_sentences)
english_vocab_size = len(english_tokenizer.word_index) + 1

# Tokenize Brushaski sentences
start_token = "<start>"
brushaski_tokenizer = Tokenizer()
brushaski_tokenizer.fit_on_texts(brushaski_sentences)
brushaski_sequences = brushaski_tokenizer.texts_to_sequences(brushaski_sentences)
brushaski_vocab_size = len(brushaski_tokenizer.word_index) + 1

# Pad sequences to the same length
max_english_len = max(len(seq) for seq in english_sequences)
max_brushaski_len = max(len(seq) for seq in brushaski_sequences)

english_padded = pad_sequences(english_sequences, maxlen=max_english_len, padding='post')
brushaski_padded = pad_sequences(brushaski_sequences, maxlen=max_brushaski_len, padding='post')

print(f"English Vocab Size: {english_vocab_size}, Brushaski Vocab Size: {brushaski_vocab_size}")

print(english_padded[0])
print(brushaski_padded[0])

#data preparation
import numpy as np

# Decoder target data (Brushaski sequences shifted by one step)
decoder_target_data = np.zeros_like(brushaski_padded)
decoder_target_data[:, :-1] = brushaski_padded[:, 1:]

# Expand dimensions to match sparse categorical cross-entropy format
decoder_target_data = decoder_target_data[..., np.newaxis]

english_vocab_size = len(english_tokenizer.word_index) + 1  # +1 for padding
brushaski_vocab_size = len(brushaski_tokenizer.word_index) + 1

# Display a few tokens and their words
english_word_to_token = english_tokenizer.word_index  # Mapping: word -> token
english_token_to_word = {v: k for k, v in english_word_to_token.items()}  # Reverse mapping: token -> word

# Print first 10 tokens and their words
print("English Tokens (word -> token):")
for word, token in list(english_word_to_token.items())[:10]:
    print(f"{word}: {token}")

print("\nEnglish Tokens (token -> word):")
for token, word in list(english_token_to_word.items())[:10]:
    print(f"{token}: {word}")

# Display a few tokens and their words
brushaski_word_to_token = brushaski_tokenizer.word_index  # Mapping: word -> token
brushaski_token_to_word = {v: k for k, v in brushaski_word_to_token.items()}  # Reverse mapping: token -> word

# Print first 10 tokens and their words
print("Brushaski Tokens (word -> token):")
for word, token in list(brushaski_word_to_token.items())[:10]:
    print(f"{word}: {token}")

print("\nBrushaski Tokens (token -> word):")
for token, word in list(brushaski_token_to_word.items())[:10]:
    print(f"{token}: {word}")

# 2. Split the dataset into train and validation sets
from sklearn.model_selection import train_test_split

# Split into train (80%) and validation (20%) sets
english_train, english_val, brushaski_train, brushaski_val = train_test_split(
    english_padded, brushaski_padded, test_size=0.2, random_state=42
)

decoder_target_train, decoder_target_val = train_test_split(
    decoder_target_data, test_size=0.2, random_state=42
)

# Print dataset shapes
print(f"Training samples: {english_train.shape[0]}")
print(f"Validation samples: {english_val.shape[0]}")

# 3. Build the model
from tensorflow.keras.layers import Input, LSTM, Embedding, Dense
from tensorflow.keras.models import Model

encoder_inputs = Input(shape=(None,), name="encoder_inputs")
encoder_embedding = Embedding(input_dim=english_vocab_size, output_dim=256, mask_zero=True)(encoder_inputs)
encoder_lstm = LSTM(256, return_state=True)
encoder_outputs, state_h, state_c = encoder_lstm(encoder_embedding)
encoder_states = [state_h, state_c]

decoder_inputs = Input(shape=(None,), name="decoder_inputs")
decoder_embedding = Embedding(input_dim=brushaski_vocab_size, output_dim=256, mask_zero=True)(decoder_inputs)
decoder_lstm = LSTM(256, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_embedding, initial_state=encoder_states)
decoder_dense = Dense(brushaski_vocab_size, activation="softmax")
decoder_outputs = decoder_dense(decoder_outputs)

model = Model([encoder_inputs, decoder_inputs], decoder_outputs)
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
model.summary()

model.fit(
    [english_train, brushaski_train],
    decoder_target_train,
    batch_size=32,
    epochs=200,  # Increase epochs
    validation_data=([english_val, brushaski_val], decoder_target_val)
)

model.save("brushaski_translator_model.h5")
print("Model saved successfully!")

# Fit tokenizer
brushaski_tokenizer = Tokenizer(filters='')  # Avoid removing any special tokens
brushaski_tokenizer.fit_on_texts(brushaski_sentences)

# Ensure the tokenizer includes <start> and <end> tokens
start_token = "<start>"
if start_token not in brushaski_tokenizer.word_index:
    brushaski_tokenizer.word_index[start_token] = len(brushaski_tokenizer.word_index) + 1
    brushaski_tokenizer.index_word[len(brushaski_tokenizer.word_index)] = start_token

end_token = "<end>"
if end_token not in brushaski_tokenizer.word_index:
    brushaski_tokenizer.word_index[end_token] = len(brushaski_tokenizer.word_index) + 1
    brushaski_tokenizer.index_word[len(brushaski_tokenizer.word_index)] = end_token

# Save their indices for later use
start_token_index = brushaski_tokenizer.word_index[start_token]
end_token_index = brushaski_tokenizer.word_index[end_token]

# Encoder model
encoder_model = Model(encoder_inputs, encoder_states)

# Decoder model
decoder_state_input_h = Input(shape=(256,))
decoder_state_input_c = Input(shape=(256,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]

decoder_outputs, state_h, state_c = decoder_lstm(
    decoder_embedding, initial_state=decoder_states_inputs
)
decoder_states = [state_h, state_c]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = Model(
    [decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states
)

def decode_sequence(input_seq):
    # Encode the input sequence to get the initial states
    states_value = encoder_model.predict(input_seq)

    # Prepare the target sequence with the <start> token
    target_seq = np.zeros((1, 1))  # Shape (batch_size=1, 1 timestep)
    target_seq[0, 0] = start_token_index  # Start token index

    stop_condition = False
    decoded_sentence = ""
    output_length = 0  # Track output length
    max_decoder_len = 30

    while not stop_condition:
        # Predict the next token and states using the decoder model
        output_tokens, state_h, state_c = decoder_model.predict(
            [target_seq] + states_value
        )

        # Sample the next word token (greedy decoding)
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_word = brushaski_tokenizer.index_word.get(sampled_token_index, "")

        # Append the word to the decoded sentence (if not <end>)
        if sampled_word != "<end>":
            decoded_sentence += " " + sampled_word

        # Check stop condition
        if sampled_word == "<end>" or output_length >= max_decoder_len:
            stop_condition = True

        # Update the target sequence with the sampled token
        target_seq = np.zeros((1, 1))
        target_seq[0, 0] = sampled_token_index

        # Update states for the next time step
        states_value = [state_h, state_c]

        output_length += 1

    return decoded_sentence.strip()

sample_sentence = "thank you"
sample_sequence = english_tokenizer.texts_to_sequences([sample_sentence.lower()])
sample_padded = pad_sequences(sample_sequence, maxlen=max_english_len, padding='post')

# Generate translation
translation = decode_sequence(sample_padded)

# Display the input and output
print(f"English: {sample_sentence}")
print(f"Brushaski: {translation}")